# backend/apps/subscribe/management/commands/fix_stripe_integration.py
import stripe
from django.core.management.base import BaseCommand
from django.conf import settings
from apps.subscribe.models import SubscriptionPlan

stripe.api_key = settings.STRIPE_SECRET_KEY


class Command(BaseCommand):
    help = 'Fix Stripe integration by creating real products and prices'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force recreate even if stripe_price_id exists',
        )

    def handle(self, *args, **options):
        force = options['force']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Stripe
        try:
            stripe.Balance.retrieve()
            self.stdout.write(self.style.SUCCESS('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Stripe —Ä–∞–±–æ—Ç–∞–µ—Ç'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Stripe: {e}'))
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω—ã
        plans = SubscriptionPlan.objects.filter(is_active=True)
        
        for plan in plans:
            self.stdout.write(f'–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω: {plan.name}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å
            if plan.stripe_price_id and not force and plan.stripe_price_id.startswith('price_1'):
                self.stdout.write(f'  ‚è≠Ô∏è –ü–ª–∞–Ω —É–∂–µ –∏–º–µ–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π Stripe ID: {plan.stripe_price_id}')
                continue
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
                product = stripe.Product.create(
                    name=plan.name,
                    description=f"Subscription plan: {plan.name}",
                    metadata={
                        'plan_id': plan.id,
                        'django_model': 'SubscriptionPlan',
                        'created_by': 'django_management_command'
                    }
                )
                self.stdout.write(f'  ‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: {product.id}')
                
                # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—É
                price = stripe.Price.create(
                    product=product.id,
                    unit_amount=int(plan.price * 100),  # –í —Ü–µ–Ω—Ç–∞—Ö
                    currency='eur',
                    recurring={'interval': 'month'},
                    metadata={
                        'plan_id': plan.id,
                        'django_model': 'SubscriptionPlan'
                    }
                )
                self.stdout.write(f'  ‚úÖ –¶–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞: {price.id}')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω
                old_id = plan.stripe_price_id
                plan.stripe_price_id = price.id
                plan.save()
                
                self.stdout.write(
                    self.style.SUCCESS(
                        f'  ‚úÖ –ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: {old_id} ‚Üí {price.id}'
                    )
                )
                
            except stripe.error.StripeError as e:
                self.stdout.write(
                    self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ Stripe –¥–ª—è –ø–ª–∞–Ω–∞ {plan.name}: {e}')
                )
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'  ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∞ {plan.name}: {e}')
                )
        
        self.stdout.write(
            self.style.SUCCESS('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Stripe Dashboard.')
        )